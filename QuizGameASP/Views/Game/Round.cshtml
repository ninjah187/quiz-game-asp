@model QuizGameASP.Models.Match
@{
    Layout = "/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="/Content/Questions.css" />

<div id="question-category-btn-container">
    <button id="question-category-btn">@Model.CurrentRound.CategoryName</button>
</div>

<div class="question-container">
    <h2 id="question-category">@Html.DisplayFor(c => Model.CurrentRound.CategoryName)</h2>
@foreach (var question in Model.CurrentRound.Questions)
{
    <div class="question-content">
        <!--<p class="question-id">@question.ID</p>-->
        <span class="question-id" id="@question.ID"></span>
        <div class="question-question">@Html.DisplayFor(q => question.Content)</div>
        <div class="question-answers">
            <button class="question-answer">@Html.DisplayFor(q => question.Answers[0])</button>
            <br />
            <button class="question-answer">@Html.DisplayFor(q => question.Answers[1])</button>
            <br />
            <button class="question-answer">@Html.DisplayFor(q => question.Answers[2])</button>
            <br />
            <button class="question-answer">@Html.DisplayFor(q => question.Answers[3])</button>
            <br />
        </div>
  </div>
}

    <div class="progress-bar-container">
    <div class="progress-bar">
        <div class="progress-bar-under">
            <div class="progress-bar-above"></div>
        </div>
    </div>
    </div>

</div>

<script>
    //TODO: wyślij zapytanie AJAX z wynikiem rundy, które zaktualizuje model Match
    //TODO: jeśli zapytanie zakończy się sukcesem:
    //TODO: - wyświetl wynik rundy w widoku Round.cshtml, przekieruj do widoku Match.cshtml
    //TODO: LUB
    //TODO: - przekieruj do widoku Match.cshtml

    //TODO: ilość uzyskanych punktów zależna od czasu odpowiedzi na pytanie

    //TODO: rozważ:
    //TODO: - tworzenie obiektu rundy w Round.cshtml,
    //TODO: - przypisanie obiektu rundy do obiektu meczu po zakończonej rundzie, przy przydzielaniu wyników

    //ZASTANÓW SIĘ!! KLASY .current i .hidden są NIEPOTRZEBNE

    //VARIABLES
    var questionNumber = 0;
    var questions = document.getElementsByClassName("question-content");;

    var points = 0;
    var answerString = "";

    var progressBarInterval;
    //var progressBarCurrent = $(".progress-bar").width();
    var progressBarTotal = 8000; //total time in ms
    var progressBarCurrent = progressBarTotal;
    var step = 5;

    //FUNCTIONS
    function progressBarUpdate() {
        //progressBarCurrent -= 0.5;
        progressBarCurrent -= step;

        if (progressBarCurrent < 0) {
            clearInterval(progressBarInterval);
            removeAnswerClickHandlers();
            answerString += "0,";
            setTimeout(function () {
                questionContainer.hide("slow");
                if (questionNumber <= 1) {
                    questionCategoryContainer.show("slow");
                }
                setTimeout(nextQuestion, 500);
            }, 1000);
            return;
        }

        var percent = progressBarCurrent / progressBarTotal * 100;
        percent += "%";
        $(".progress-bar-above").width(percent);
    }

    function progressBarReset() {
        progressBarCurrent = progressBarTotal;
        $(".progress-bar-above").width("100%");
    }

    function progressBarGo() {
        progressBarInterval = setInterval(progressBarUpdate, step);
    }

    function progressBarStop() {
        clearInterval(progressBarInterval);
    }

    function nextQuestion() {
        var question = $(questions[questionNumber]);
        question.removeClass("question-current");
        question.addClass("question-hidden");

        questionNumber++;

        if (questionNumber >= 3) {
            //alert("Twój wynik to: " + points);
            var matchID = "@Model.ID";
            window.location = "/Game/RoundResult?matchID=" + matchID + "&result=" + points +
                "&answerString=" + answerString;
            return;
        }

        question = $(questions[questionNumber]);
        question.removeClass("question-hidden");
        question.addClass("question-current");

        addAnswerClickHandlers();

        progressBarReset();
        //progressBarGo();
    }

    function addAnswerClickHandlers() {
        /*for (i = 0; i < questions.length; i++) {
            var answers = $(questions[i]).children(".question-answers").children(".question-answer");
            $(answers).on("click", answerClickEventHandler);
        }*/

        //turns on click handler only in current question, not in all questions, like before
        var answer = $(".question-current").children(".question-answers").children(".question-answer");
        answer.on("click", answerClickEventHandler);
    }

    function removeAnswerClickHandlers() {
        /*for (i = 0; i < questions.length; i++) {
            var answers = $(questions[i]).children(".question-answers").children(".question-answer");
            $(answers).off("click", answerClickEventHandler);
        }*/
        var answer = $(".question-current").children(".question-answers").children(".question-answer");
        answer.off("click", answerClickEventHandler);
    }

    var questionContainer = $(".question-container");
    var questionCategoryContainer = $("#question-category-btn-container");

    function answerClickEventHandler() {
        removeAnswerClickHandlers();
        progressBarStop();

        var answerBtn = $(this);
        var questionId = $(this).parent().parent().children(".question-id").attr("id"); //get .question-content
        var answerTxt = $(this).text();

        $.ajax({
            url: "/Game/CheckAnswer/",
            data: {
                questionID: questionId,
                answer: answerTxt,
            },
            dataType: "text",
            type: "GET",
            success: function (data) {
                if (data == "ok") {
                    answerBtn.css("background-color", "green");
                    points++;
                    answerString += "1,";
                    //setTimeout(nextQuestion, 1000);
                } else {
                    if (data == "wrong") {
                        answerBtn.css("background-color", "red");
                        answerString += "0,"
                    }
                }
            },
            error: function () {
                alert("Błąd.");
            },
            complete: function () {
                //setTimeout(nextQuestion, 1000);
                setTimeout(function () {
                    questionContainer.hide("slow");
                    if (questionNumber <= 1) {
                        questionCategoryContainer.show("slow");
                    }
                    setTimeout(nextQuestion, 500); //timeout żeby pytanie nie pojawiło się, nim nie zniknie questionContainer
                }, 1000);
            }
        });
    }

    //ADD CLASSES FOR ELEMENTS WHITCH DISPLAY QUESTIONS
    //PREPARE FIRST QUESTION
    $(questions[0]).addClass("question-current");
    $(questions[1]).addClass("question-hidden");
    $(questions[2]).addClass("question-hidden");
    addAnswerClickHandlers();

    //START
    //progressBarGo();

    if ($(window).height() <= 480) {
        $("#question-category").remove();
    }

    questionCategoryContainer.show("slow");

    questionCategoryContainer.on("click", function () {
        questionCategoryContainer.hide("slow");
        questionContainer.show("slow");
        progressBarGo();
    });
</script>
<!--<script src="/Scripts/GameQuestionsScripts.js"></script>-->
